/**
 * Este archivo demuestra c√≥mo se ve el c√≥digo cuando NO usamos arquitectura en capas.
 *
 * PROBLEMAS QUE VAMOS A VER:
 * 1. üçù C√≥digo espagueti - todo mezclado
 * 2. üîÑ Duplicaci√≥n de l√≥gica
 * 3. üöß Dif√≠cil de mantener
 * 4. üß™ Imposible de testear
 * 5. üë• No se puede trabajar en equipo
 * 6. üì± No se puede reutilizar para m√≥vil
 */

import express, { Request, Response } from 'express';
import mysql from 'mysql2/promise';
import { v4 as uuidv4 } from 'uuid';

// ‚ùå PROBLEMA 1: Configuraci√≥n mezclada con l√≥gica
const app = express();
app.use(express.json());

// ‚ùå PROBLEMA 2: Conexi√≥n a BD en cada endpoint
const DB_CONFIG = {
    host: 'localhost',
    port: 3307,
    user: 'biblioteca_user',
    password: 'biblioteca_pass',
    database: 'biblioteca_db',
};

/**
 * ‚ùå ENDPOINT PARA BUSCAR LIBROS - TODO MEZCLADO
 *
 * En este endpoint tenemos:
 * - Validaci√≥n HTTP ‚úì (deber√≠a estar en presentaci√≥n)
 * - Conexi√≥n a base de datos ‚úó (deber√≠a estar en datos)
 * - L√≥gica de negocio ‚úó (deber√≠a estar en negocio)
 * - Formateo de respuesta ‚úó (deber√≠a estar en presentaci√≥n)
 */
app.get('/libros-malo', async (req: Request, res: Response) => {
    let conexion;

    try {
        // ‚ùå PRESENTACI√ìN: Validaci√≥n HTTP mezclada
        const titulo = req.query.titulo as string;
        const categoria = req.query.categoria as string;

        // ‚ùå DATOS: Conexi√≥n a BD en el endpoint
        conexion = await mysql.createConnection(DB_CONFIG);

        // ‚ùå DATOS: Query SQL en el endpoint
        let query = 'SELECT * FROM books WHERE 1=1';
        const params: any[] = [];

        if (titulo) {
            // ‚ùå PRESENTACI√ìN: Validaci√≥n de negocio mezclada con HTTP
            if (titulo.length < 2) {
                return res.status(400).json({ error: 'T√≠tulo muy corto' });
            }
            query += ' AND title LIKE ?';
            params.push(`%${titulo}%`);
        }

        if (categoria) {
            query += ' AND category = ?';
            params.push(categoria);
        }

        const [libros] = (await conexion.execute(query, params)) as mysql.RowDataPacket[][];

        // ‚ùå NEGOCIO: L√≥gica de negocio mezclada
        const librosConInfo = libros.map((libro: any) => {
            // ‚ùå Esta l√≥gica deber√≠a estar en la entidad Book
            const disponible = libro.available_copies > 0;
            const popularidad = libro.available_copies / libro.total_copies < 0.3;
            const esReciente = new Date().getFullYear() - libro.published_year <= 5;

            // ‚ùå PRESENTACI√ìN: Formateo mezclado con l√≥gica
            return {
                id: libro.id,
                titulo: libro.title, // ‚ùå Cambi√© nombres de campos aqu√≠
                autor: libro.author,
                disponible,
                popular: popularidad,
                reciente: esReciente,
            };
        });

        // ‚ùå PRESENTACI√ìN: Response mezclado
        res.json({ success: true, libros: librosConInfo });
    } catch (error) {
        console.error(error); // ‚ùå Log mezclado
        res.status(500).json({ error: 'Error buscando libros' });
    } finally {
        if (conexion) {
            await conexion.end(); // ‚ùå Manejo de conexiones duplicado
        }
    }
});

/**
 * ‚ùå ENDPOINT PARA CREAR PR√âSTAMO - A√öN PEOR
 *
 * Aqu√≠ vamos a ver TODOS los problemas juntos:
 */
app.post('/prestamo-malo', async (req: Request, res: Response) => {
    let conexion;

    try {
        // ‚ùå PRESENTACI√ìN: Validaci√≥n b√°sica mezclada
        const { usuarioId, libroId } = req.body;

        if (!usuarioId || !libroId) {
            return res.status(400).json({ error: 'Faltan datos' });
        }

        // ‚ùå DATOS: Otra conexi√≥n duplicada
        conexion = await mysql.createConnection(DB_CONFIG);

        // ‚ùå NEGOCIO + DATOS: Todo mezclado sin separaci√≥n

        // Verificar que el usuario existe
        const [usuarios] = (await conexion.execute('SELECT * FROM users WHERE id = ?', [
            usuarioId,
        ])) as mysql.RowDataPacket[][];

        if (usuarios.length === 0) {
            return res.status(404).json({ error: 'Usuario no encontrado' });
        }

        const usuario = usuarios[0];

        // ‚ùå NEGOCIO: L√≥gica de l√≠mites hardcodeada y duplicada
        let limite;
        if (usuario.user_type === 'STUDENT') {
            limite = 3;
        } else if (usuario.user_type === 'PROFESSOR') {
            limite = 10;
        } else {
            limite = 15;
        }

        if (usuario.current_loans >= limite) {
            return res.status(400).json({
                error: `El ${usuario.user_type} no puede tener m√°s de ${limite} pr√©stamos`,
            });
        }

        // Verificar que el libro existe y est√° disponible
        const [libros] = (await conexion.execute('SELECT * FROM books WHERE id = ?', [
            libroId,
        ])) as mysql.RowDataPacket[][];

        if (libros.length === 0) {
            return res.status(404).json({ error: 'Libro no encontrado' });
        }

        const libro = libros[0];

        if (libro.available_copies <= 0) {
            return res.status(400).json({ error: 'Libro no disponible' });
        }

        // Verificar que no tenga ya el libro
        const [prestamosExistentes] = (await conexion.execute(
            'SELECT * FROM loans WHERE user_id = ? AND book_id = ? AND status = "ACTIVE"',
            [usuarioId, libroId],
        )) as mysql.RowDataPacket[][];

        if (prestamosExistentes.length > 0) {
            return res.status(400).json({ error: 'Ya tiene este libro prestado' });
        }

        // ‚ùå NEGOCIO: C√°lculo de fechas hardcodeado
        const fechaPrestamo = new Date();
        const fechaVencimiento = new Date();

        // ‚ùå Misma l√≥gica duplicada otra vez
        if (usuario.user_type === 'STUDENT') {
            fechaVencimiento.setDate(fechaVencimiento.getDate() + 14);
        } else if (usuario.user_type === 'PROFESSOR') {
            fechaVencimiento.setDate(fechaVencimiento.getDate() + 30);
        } else {
            fechaVencimiento.setDate(fechaVencimiento.getDate() + 60);
        }

        // ‚ùå DATOS: Operaciones de BD sin transacciones
        const prestamoId = uuidv4();

        // Crear pr√©stamo
        await conexion.execute(
            'INSERT INTO loans (id, user_id, book_id, loan_date, due_date, status) VALUES (?, ?, ?, ?, ?, ?)',
            [prestamoId, usuarioId, libroId, fechaPrestamo, fechaVencimiento, 'ACTIVE'],
        );

        // Actualizar copias disponibles
        await conexion.execute('UPDATE books SET available_copies = available_copies - 1 WHERE id = ?', [libroId]);

        // Actualizar contador del usuario
        await conexion.execute('UPDATE users SET current_loans = current_loans + 1 WHERE id = ?', [usuarioId]);

        // ‚ùå PRESENTACI√ìN: Respuesta inconsistente con otros endpoints
        res.json({
            ok: true, // ‚ùå Diferente a "success" de arriba
            prestamo: {
                id: prestamoId,
                usuario: usuario.name,
                libro: libro.title,
                vence: fechaVencimiento.toISOString(),
            },
        });
    } catch (error) {
        console.error('Error creando pr√©stamo:', error);

        // ‚ùå No hay rollback, los datos quedan inconsistentes
        res.status(500).json({ error: 'Error interno' });
    } finally {
        if (conexion) {
            await conexion.end();
        }
    }
});

/**
 * ‚ùå OTRO ENDPOINT CON LA MISMA L√ìGICA DUPLICADA
 *
 * Para devolver un libro tambi√©n necesito la l√≥gica de usuarios,
 * pero como est√° toda mezclada, tengo que duplicar c√≥digo:
 */
app.post('/devolver-malo/:prestamoId', async (req: Request, res: Response) => {
    let conexion;

    try {
        const prestamoId = req.params.prestamoId;
        conexion = await mysql.createConnection(DB_CONFIG);

        // ‚ùå DUPLICACI√ìN: Misma query que en crear pr√©stamo
        const [prestamos] = (await conexion.execute('SELECT * FROM loans WHERE id = ? AND status = "ACTIVE"', [
            prestamoId,
        ])) as mysql.RowDataPacket[][];

        if (prestamos.length === 0) {
            return res.status(404).json({ error: 'Pr√©stamo no encontrado' });
        }

        const prestamo = prestamos[0];

        // ‚ùå Sin transacciones otra vez
        await conexion.execute('UPDATE loans SET status = "RETURNED", return_date = NOW() WHERE id = ?', [prestamoId]);

        await conexion.execute('UPDATE books SET available_copies = available_copies + 1 WHERE id = ?', [
            prestamo.book_id,
        ]);

        await conexion.execute('UPDATE users SET current_loans = current_loans - 1 WHERE user_id = ?', [
            prestamo.user_id,
        ]);

        res.json({ mensaje: 'Libro devuelto' }); // ‚ùå Formato diferente otra vez
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Error' });
    } finally {
        if (conexion) {
            await conexion.end();
        }
    }
});

/**
 * ‚ùå FUNCI√ìN PARA VALIDAR EMAIL - DUPLICADA EN VARIOS LUGARES
 *
 * Como no hay capas, cada endpoint que necesita validar email
 * tiene su propia versi√≥n de esta funci√≥n
 */
function validarEmail1(email: string): boolean {
    return email.includes('@') && email.includes('.');
}

function validarEmail2(email: string): boolean {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email); // ‚ùå Diferente l√≥gica
}

// ‚ùå Y probablemente habr√≠a una tercera versi√≥n en otro archivo...

/**
 * ‚ùå PROBLEMAS EVIDENTES DE ESTE ENFOQUE:
 *
 * 1. üçù C√ìDIGO ESPAGUETI:
 *    - HTTP, SQL, l√≥gica de negocio, todo mezclado
 *    - Imposible saber qu√© hace cada parte
 *
 * 2. üîÑ DUPLICACI√ìN MASIVA:
 *    - Conexi√≥n a BD en cada endpoint
 *    - L√≥gica de l√≠mites repetida 3 veces
 *    - Validaciones diferentes en cada lugar
 *
 * 3. üöß MANTENIMIENTO IMPOSIBLE:
 *    - Para cambiar l√≠mites de estudiante, tengo que buscar en TODO el c√≥digo
 *    - Si cambio la BD, tengo que tocar cada endpoint
 *    - Un bug se replica en m√∫ltiples lugares
 *
 * 4. üß™ TESTING IMPOSIBLE:
 *    - No puedo testear l√≥gica de negocio sin levantar HTTP y BD
 *    - No puedo mockear partes del sistema
 *    - Tests ser√≠an s√∫per lentos
 *
 * 5. üë• TRABAJO EN EQUIPO IMPOSIBLE:
 *    - Un dev no puede trabajar en BD mientras otro en HTTP
 *    - Conflictos constantes en Git
 *    - No hay especializaci√≥n posible
 *
 * 6. üì± REUTILIZACI√ìN IMPOSIBLE:
 *    - Para hacer una app m√≥vil, tengo que duplicar TODA la l√≥gica
 *    - No puedo crear una API para terceros
 *    - Cada cliente necesita su propia implementaci√≥n
 *
 * 7. üîí SEGURIDAD COMPROMETIDA:
 *    - Credenciales de BD por todos lados
 *    - No hay punto central para validaciones
 *    - F√°cil introducir vulnerabilidades
 *
 * 8. üìä PERFORMANCE TERRIBLE:
 *    - Nueva conexi√≥n a BD en cada request
 *    - No hay cache posible
 *    - No se puede optimizar por partes
 */

/**
 * üéì PARA LA CLASE:
 *
 * Mostrar este archivo DESPU√âS de explicar la arquitectura en capas.
 *
 * Preguntar:
 * - "¬øQu√© problemas ven aqu√≠?"
 * - "¬øC√≥mo lo solucionar√≠amos con capas?"
 * - "¬øD√≥nde pondr√≠amos cada parte del c√≥digo?"
 *
 * Luego mostrar c√≥mo el mismo endpoint se ve en el c√≥digo con capas:
 * - BookController.searchBooks() - solo HTTP
 * - BookService.searchBooks() - solo reglas
 * - BookRepository.search() - solo datos
 */

console.log(`
‚ùå ESTE ES EL ARCHIVO DEL "C√ìMO NO HACERLO"
‚ùå Para ejecutar: node dist/examples/without-layers-BAD-EXAMPLE.js
‚ùå Compara este c√≥digo con la versi√≥n con capas en src/presentation/controllers/
`);

export default app;
